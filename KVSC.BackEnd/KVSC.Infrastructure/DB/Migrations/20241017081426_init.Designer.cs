// <auto-generated />
using System;
using KVSC.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KVSC.Infrastructure.Migrations
{
    [DbContext(typeof(KVSCContext))]
    [Migration("20241017081426_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KVSC.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ComboServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComboServiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PetId");

                    b.HasIndex("PetServiceId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AppointmentDate = new DateTime(2024, 11, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8272),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AppointmentDate = new DateTime(2024, 11, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8276),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AppointmentDate = new DateTime(2024, 11, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8279),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            IsDeleted = false,
                            PetServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AppointmentDate = new DateTime(2024, 11, 3, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8283),
                            CustomerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            IsDeleted = false,
                            PetServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AppointmentDate = new DateTime(2024, 11, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8287),
                            CustomerId = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AppointmentDate = new DateTime(2024, 11, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8324),
                            CustomerId = new Guid("5f28fcb6-675b-4f97-a925-01ac8c68b5ac"),
                            IsDeleted = false,
                            PetServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AppointmentDate = new DateTime(2024, 11, 8, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8328),
                            CustomerId = new Guid("0d1fbbab-a175-4d90-8291-d5d96ebb9359"),
                            IsDeleted = false,
                            PetServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AppointmentDate = new DateTime(2024, 11, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8339),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            Status = "Reported"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AppointmentDate = new DateTime(2024, 11, 12, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8343),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Reported"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AppointmentDate = new DateTime(2024, 11, 7, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 7, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8347),
                            CustomerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            IsDeleted = false,
                            PetServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AppointmentDate = new DateTime(2024, 11, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8350),
                            CustomerId = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.AppointmentVeterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("AppointmentVeterinarian", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("PetServiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComboService", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComboServiceId");

                    b.HasIndex("PetServiceId");

                    b.ToTable("ComboServiceItem", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TravelCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PetId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthStatus")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastHealthCheck")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PetTypeId");

                    b.ToTable("Pet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1111111-1111-1111-1111-111111111111"),
                            Age = 3,
                            Color = "Orange and White",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8453),
                            Gender = "Male",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi1.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 35.0,
                            Name = "Koi Fish 1",
                            Note = "Healthy with vibrant colors.",
                            OwnerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 5,
                            Weight = 2.5
                        },
                        new
                        {
                            Id = new Guid("f2222222-2222-2222-2222-222222222222"),
                            Age = 4,
                            Color = "Red and White",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8462),
                            Gender = "Female",
                            HealthStatus = 2,
                            ImageUrl = "https://example.com/koi2.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 40.0,
                            Name = "Koi Fish 2",
                            Note = "Slight issue with fins, under observation.",
                            OwnerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 3,
                            Weight = 3.0
                        },
                        new
                        {
                            Id = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Age = 2,
                            Color = "Yellow and White",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8467),
                            Gender = "Male",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi3.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 32.0,
                            Name = "Koi Fish 3",
                            Note = "In great condition, regular feeding.",
                            OwnerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 10,
                            Weight = 2.2000000000000002
                        },
                        new
                        {
                            Id = new Guid("f4444444-4444-4444-4444-444444444444"),
                            Age = 1,
                            Color = "Black and White",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8473),
                            Gender = "Female",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi4.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 25.0,
                            Name = "Koi Fish 4",
                            Note = "Newly purchased, adjusting to pond.",
                            OwnerId = new Guid("5f28fcb6-675b-4f97-a925-01ac8c68b5ac"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 7,
                            Weight = 1.8
                        },
                        new
                        {
                            Id = new Guid("f5555555-5555-5555-5555-555555555555"),
                            Age = 5,
                            Color = "Blue and White",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8479),
                            Gender = "Male",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi5.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 45.0,
                            Name = "Koi Fish 5",
                            Note = "Strong swimmer, excellent condition.",
                            OwnerId = new Guid("0d1fbbab-a175-4d90-8291-d5d96ebb9359"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 2,
                            Weight = 3.5
                        },
                        new
                        {
                            Id = new Guid("f6666666-6666-6666-6666-666666666666"),
                            Age = 2,
                            Color = "White",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8484),
                            Gender = "Female",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi6.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 28.0,
                            Name = "Koi Fish 6",
                            Note = "Excellent appetite, feeding well.",
                            OwnerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 4,
                            Weight = 2.0
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetHabitat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HabitatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PetHabitat", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(9446),
                            HabitatType = "Freshwater Pond",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(9448),
                            HabitatType = "Saltwater Pond",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PetServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TravelCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PetServiceCategoryId");

                    b.ToTable("PetService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            AvailableFrom = new DateTime(2024, 10, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 31, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 150.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7893),
                            Duration = "3 hours",
                            ImageUrl = "https://example.com/image7.jpg",
                            IsDeleted = false,
                            Name = "Emergency Care",
                            PetServiceCategoryId = new Guid("3d3bb172-c3d0-4d0f-ac50-713708bc6498"),
                            TravelCost = 30.00m
                        },
                        new
                        {
                            Id = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            AvailableFrom = new DateTime(2024, 10, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 31, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 100.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7899),
                            Duration = "2 hours",
                            ImageUrl = "https://example.com/image5.jpg",
                            IsDeleted = false,
                            Name = "Parasite Treatment",
                            PetServiceCategoryId = new Guid("da91046c-71d1-429b-ade3-5e8ff9f701a6"),
                            TravelCost = 25.00m
                        },
                        new
                        {
                            Id = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            AvailableFrom = new DateTime(2024, 10, 3, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 20.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7903),
                            Duration = "45 minutes",
                            ImageUrl = "https://example.com/image3.jpg",
                            IsDeleted = false,
                            Name = "Water Quality Testing",
                            PetServiceCategoryId = new Guid("75efc332-0e1b-4d35-a609-4897d83c173e"),
                            TravelCost = 5.00m
                        },
                        new
                        {
                            Id = new Guid("39ebc58b-6731-491d-949d-82f387dce82e"),
                            AvailableFrom = new DateTime(2024, 10, 3, 22, 10, 20, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 4, 2, 10, 20, 0, DateTimeKind.Unspecified),
                            BasePrice = 29.99m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7907),
                            Duration = "30 minutes",
                            ImageUrl = "https://example.com/image.jpg",
                            IsDeleted = false,
                            Name = "Koi Feeding Service",
                            PetServiceCategoryId = new Guid("a5e47a8f-f6e1-4c7a-8955-4a928744f9bf"),
                            TravelCost = 10.00m
                        },
                        new
                        {
                            Id = new Guid("33e71556-d924-4101-bd1f-8707ca0e6f87"),
                            AvailableFrom = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 20, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 30.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7910),
                            Duration = "1 hour",
                            ImageUrl = "https://example.com/image2.jpg",
                            IsDeleted = false,
                            Name = "Koi Feeding Service",
                            PetServiceCategoryId = new Guid("fe3df183-1f42-4301-a1fb-35e6211c8816"),
                            TravelCost = 15.00m
                        },
                        new
                        {
                            Id = new Guid("2d547de7-d7a0-4c27-a26c-9cf3a7099817"),
                            AvailableFrom = new DateTime(2024, 10, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 75.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7914),
                            Duration = "1.5 hours",
                            ImageUrl = "https://example.com/image4.jpg",
                            IsDeleted = false,
                            Name = "Fungal Treatment",
                            PetServiceCategoryId = new Guid("a5e47a8f-f6e1-4c7a-8955-4a928744f9bf"),
                            TravelCost = 20.00m
                        },
                        new
                        {
                            Id = new Guid("8c0ce681-03e2-4ed8-83b2-abc3db694c5b"),
                            AvailableFrom = new DateTime(2024, 10, 3, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 28, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 40.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7918),
                            Duration = "1 hour",
                            ImageUrl = "https://example.com/image8.jpg",
                            IsDeleted = false,
                            Name = "Educational Workshops",
                            PetServiceCategoryId = new Guid("15c55a94-06fb-4dac-8b32-7c1d7af085a3"),
                            TravelCost = 12.00m
                        },
                        new
                        {
                            Id = new Guid("7253ea62-e419-40dc-bc70-e069611587dd"),
                            AvailableFrom = new DateTime(2024, 10, 4, 14, 2, 32, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 11, 3, 14, 2, 32, 0, DateTimeKind.Unspecified),
                            BasePrice = 1.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7923),
                            Duration = "string",
                            ImageUrl = "string",
                            IsDeleted = false,
                            Name = "string",
                            PetServiceCategoryId = new Guid("83d70177-2e40-49c9-a0bf-27ce80cce340"),
                            TravelCost = 0.00m
                        },
                        new
                        {
                            Id = new Guid("c33e3a86-0230-468b-8c06-ee91b7e8cc21"),
                            AvailableFrom = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 30, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 60.00m,
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7926),
                            Duration = "1 hour",
                            ImageUrl = "https://example.com/image6.jpg",
                            IsDeleted = false,
                            Name = "Pond Maintenance",
                            PetServiceCategoryId = new Guid("82b86176-d076-4576-b0f3-60220ca3e5ba"),
                            TravelCost = 15.00m
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicableTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PetServiceCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83d70177-2e40-49c9-a0bf-27ce80cce340"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7700),
                            Description = "A standard health check for Koi fish to monitor their overall well-being and prevent diseases.",
                            IsDeleted = false,
                            Name = "Health Check",
                            ServiceType = "Health"
                        },
                        new
                        {
                            Id = new Guid("fe3df183-1f42-4301-a1fb-35e6211c8816"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7713),
                            Description = "Specialized feeding service for Koi fish, ensuring proper nutrition and dietary requirements.",
                            IsDeleted = false,
                            Name = "Feeding Service",
                            ServiceType = "Feeding"
                        },
                        new
                        {
                            Id = new Guid("75efc332-0e1b-4d35-a609-4897d83c173e"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7768),
                            Description = "Testing water quality parameters to ensure a healthy environment for Koi.",
                            IsDeleted = false,
                            Name = "Water Quality Testing",
                            ServiceType = "Testing"
                        },
                        new
                        {
                            Id = new Guid("a5e47a8f-f6e1-4c7a-8955-4a928744f9bf"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7777),
                            Description = "Treatment services for Koi suffering from fungal infections.",
                            IsDeleted = false,
                            Name = "Fungal Treatment",
                            ServiceType = "Treatment"
                        },
                        new
                        {
                            Id = new Guid("da91046c-71d1-429b-ade3-5e8ff9f701a6"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7779),
                            Description = "Services to treat and prevent parasites in Koi fish.",
                            IsDeleted = false,
                            Name = "Parasite Treatment",
                            ServiceType = "Treatment"
                        },
                        new
                        {
                            Id = new Guid("82b86176-d076-4576-b0f3-60220ca3e5ba"),
                            ApplicableTo = "Ponds",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7783),
                            Description = "Regular maintenance services for Koi ponds to ensure optimal conditions.",
                            IsDeleted = false,
                            Name = "Pond Maintenance",
                            ServiceType = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("3d3bb172-c3d0-4d0f-ac50-713708bc6498"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7787),
                            Description = "Guidance and assistance in breeding Koi fish.",
                            IsDeleted = false,
                            Name = "Koi Breeding Assistance",
                            ServiceType = "Breeding"
                        },
                        new
                        {
                            Id = new Guid("15c55a94-06fb-4dac-8b32-7c1d7af085a3"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7792),
                            Description = "Safe transportation services for Koi fish.",
                            IsDeleted = false,
                            Name = "Koi Transportation",
                            ServiceType = "Transportation"
                        },
                        new
                        {
                            Id = new Guid("fb21c5e6-5db5-4dab-99b1-9c5d51f0ab51"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7795),
                            Description = "Emergency medical services for Koi in distress.",
                            IsDeleted = false,
                            Name = "Emergency Care",
                            ServiceType = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("ca3801df-081c-4db5-a416-b04791797d92"),
                            ApplicableTo = "Koi Enthusiasts",
                            CreatedDate = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(7797),
                            Description = "Workshops on Koi care and pond management.",
                            IsDeleted = false,
                            Name = "Educational Workshops",
                            ServiceType = "Education"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PetHabitatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecificType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetHabitatId");

                    b.ToTable("PetType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8567),
                            GeneralType = "Fish",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Koi Fish"
                        },
                        new
                        {
                            Id = new Guid("e2222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8573),
                            GeneralType = "Fish",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Goldfish"
                        },
                        new
                        {
                            Id = new Guid("e3333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8579),
                            GeneralType = "Reptile",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Turtle"
                        },
                        new
                        {
                            Id = new Guid("e4444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8581),
                            GeneralType = "Mammal",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Dog"
                        },
                        new
                        {
                            Id = new Guid("e5555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8583),
                            GeneralType = "Mammal",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Cat"
                        },
                        new
                        {
                            Id = new Guid("e6666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8585),
                            GeneralType = "Bird",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Parrot"
                        },
                        new
                        {
                            Id = new Guid("e7777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8589),
                            GeneralType = "Bird",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Canary"
                        },
                        new
                        {
                            Id = new Guid("e8888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8591),
                            GeneralType = "Fish",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Betta Fish"
                        },
                        new
                        {
                            Id = new Guid("e9999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8593),
                            GeneralType = "Reptile",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Iguana"
                        },
                        new
                        {
                            Id = new Guid("eaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8595),
                            GeneralType = "Mammal",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Hamster"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceReportId")
                        .IsUnique()
                        .HasFilter("[ServiceReportId] IS NOT NULL");

                    b.ToTable("Prescription", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(9283),
                            IsDeleted = false,
                            PrescriptionDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceReportId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(9288),
                            IsDeleted = false,
                            PrescriptionDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceReportId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(9290),
                            IsDeleted = false,
                            PrescriptionDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceReportId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PrescriptionDetail", b =>
                {
                    b.Property<Guid>("PrescriptionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionDetailId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetail", (string)null);

                    b.HasData(
                        new
                        {
                            PrescriptionDetailId = new Guid("11111111-1111-1111-1111-111111111111"),
                            MedicineId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PrescriptionId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Price = 100.00m,
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("22222222-2222-2222-2222-222222222222"),
                            MedicineId = new Guid("22222222-2222-2222-2222-222222222222"),
                            PrescriptionId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Price = 150.00m,
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("33333333-3333-3333-3333-333333333333"),
                            MedicineId = new Guid("33333333-3333-3333-3333-333333333333"),
                            PrescriptionId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Price = 50.00m,
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("44444444-4444-4444-4444-444444444444"),
                            MedicineId = new Guid("44444444-4444-4444-4444-444444444444"),
                            PrescriptionId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Price = 200.00m,
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("55555555-5555-5555-5555-555555555555"),
                            MedicineId = new Guid("55555555-5555-5555-5555-555555555555"),
                            PrescriptionId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Price = 250.00m,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8683),
                            Description = "Medicine to treat parasite infections in Koi.",
                            ImageUrl = "https://example.com/image1.jpg",
                            IsDeleted = false,
                            Name = "Anti-Parasite Medication",
                            Price = 50.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Water conditioner for Koi ponds.",
                            ImageUrl = "https://example.com/image2.jpg",
                            IsDeleted = false,
                            Name = "Water Conditioner",
                            Price = 25.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8690),
                            Description = "Nutritional supplement to enhance Koi growth.",
                            ImageUrl = "https://example.com/image3.jpg",
                            IsDeleted = false,
                            Name = "Koi Growth Supplement",
                            Price = 35.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8692),
                            Description = "Stabilizes the pH level of pond water.",
                            ImageUrl = "https://example.com/image4.jpg",
                            IsDeleted = false,
                            Name = "Pond pH Stabilizer",
                            Price = 40.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8697),
                            Description = "Treatment for fungal infections in Koi.",
                            ImageUrl = "https://example.com/image5.jpg",
                            IsDeleted = false,
                            Name = "Fungal Treatment for Koi",
                            Price = 60.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8699),
                            Description = "Replacement filter for Koi ponds.",
                            ImageUrl = "https://example.com/image6.jpg",
                            IsDeleted = false,
                            Name = "Koi Pond Filter",
                            Price = 75.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8702),
                            Description = "Antibiotic for treating bacterial infections in Koi.",
                            ImageUrl = "https://example.com/image7.jpg",
                            IsDeleted = false,
                            Name = "Koi Antibiotic",
                            Price = 45.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8704),
                            Description = "Prevents algae buildup in Koi ponds.",
                            ImageUrl = "https://example.com/image8.jpg",
                            IsDeleted = false,
                            Name = "Algae Control Solution",
                            Price = 30.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 170
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8730),
                            Description = "Controls parasite infections in Koi.",
                            ImageUrl = "https://example.com/image9.jpg",
                            IsDeleted = false,
                            Name = "Parasite Control Solution",
                            Price = 55.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8733),
                            Description = "Increases oxygen levels in Koi ponds.",
                            ImageUrl = "https://example.com/image10.jpg",
                            IsDeleted = false,
                            Name = "Oxygen Booster for Ponds",
                            Price = 65.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 130
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8815),
                            Description = "Medicines for Koi fish treatments.",
                            IsDeleted = false,
                            Name = "Medicines"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8817),
                            Description = "Products for water conditioning and treatment.",
                            IsDeleted = false,
                            Name = "Water Treatment"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8821),
                            Description = "Equipment and accessories for Koi ponds.",
                            IsDeleted = false,
                            Name = "Pond Equipment"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8822),
                            Description = "Food and nutritional supplements for Koi fish.",
                            IsDeleted = false,
                            Name = "Food & Nutrition"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8824),
                            Description = "Devices and kits for monitoring Koi health.",
                            IsDeleted = false,
                            Name = "Health Monitoring"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8826),
                            Description = "Products for cleaning and maintaining Koi ponds.",
                            IsDeleted = false,
                            Name = "Cleaning & Maintenance"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8827),
                            Description = "Supplies for Koi breeding and spawning.",
                            IsDeleted = false,
                            Name = "Breeding Supplies"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8829),
                            Description = "Materials and accessories for pond landscaping.",
                            IsDeleted = false,
                            Name = "Pond Landscaping"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8830),
                            Description = "Tools and equipment for safe fish transportation.",
                            IsDeleted = false,
                            Name = "Fish Transportation"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8832),
                            Description = "Essential supplies for emergency situations with Koi fish.",
                            IsDeleted = false,
                            Name = "Emergency Supplies"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Veterinarian"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ServiceReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasPrescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("ServiceReport", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AppointmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8921),
                            HasPrescription = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            PrescriptionId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Recommendations = "Apply antifungal medication.",
                            ReportContent = "Fungal infection treatment recommended.",
                            ReportDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AppointmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8925),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Regular water testing recommended.",
                            ReportContent = "Report for Koi health check, everything looks fine.",
                            ReportDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AppointmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8928),
                            HasPrescription = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            PrescriptionId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Recommendations = "Follow the prescribed medicine.",
                            ReportContent = "Parasite treatment required for Koi.",
                            ReportDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AppointmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8932),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Adjust pH levels in the water.",
                            ReportContent = "Water quality test completed, minor adjustments needed.",
                            ReportDate = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AppointmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8934),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Monitor fish for 48 hours.",
                            ReportContent = "Emergency care completed, fish stable.",
                            ReportDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AppointmentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8937),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Maintain current diet, no changes needed.",
                            ReportContent = "Feeding routine assessment, nutrition levels adequate.",
                            ReportDate = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AppointmentId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8940),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Fish arrived safely. No action needed.",
                            ReportContent = "Transportation completed successfully.",
                            ReportDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AppointmentId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8942),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Monitor breeding progress over the next 10 days.",
                            ReportContent = "Koi breeding assistance provided. Successful pairing observed.",
                            ReportDate = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AppointmentId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8946),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Replace filter immediately to prevent water contamination.",
                            ReportContent = "Water quality testing performed. Filter replacement needed.",
                            ReportDate = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AppointmentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8949),
                            HasPrescription = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            PrescriptionId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Recommendations = "Apply antiseptic and monitor healing progress.",
                            ReportContent = "Health check performed. Minor injuries found.",
                            ReportDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4feb4940-94dc-4aed-b580-ee116b668704"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3633),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Admin",
                            role = 1
                        },
                        new
                        {
                            Id = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3661),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager@gmail.com",
                            FullName = "Manager",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Manager",
                            role = 2
                        },
                        new
                        {
                            Id = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3665),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "veterinarian1@gmail.com",
                            FullName = "Veterinarian_1",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Veterinarian_1",
                            role = 3
                        },
                        new
                        {
                            Id = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3668),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "veterinarian2@gmail.com",
                            FullName = "Veterinarian_2",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Veterinarian_2",
                            role = 3
                        },
                        new
                        {
                            Id = new Guid("5f28fcb6-675b-4f97-a925-01ac8c68b5ac"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3678),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff1@gmail.com",
                            FullName = "Staff_1",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Staff_1",
                            role = 4
                        },
                        new
                        {
                            Id = new Guid("0d1fbbab-a175-4d90-8291-d5d96ebb9359"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3680),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff2@gmail.com",
                            FullName = "Staff_2",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Staff_2",
                            role = 4
                        },
                        new
                        {
                            Id = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3683),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@gmail.com",
                            FullName = "Customer_1",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Customer_1",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3685),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@gmail.com",
                            FullName = "Customer_2",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Customer_2",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(3687),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer3@gmail.com",
                            FullName = "Customer_3",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Customer_3",
                            role = 5
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Veterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Veterinarian", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8017),
                            IsDeleted = false,
                            LicenseNumber = "VN123456",
                            Qualifications = "Doctor of Veterinary Medicine (DVM)",
                            Specialty = "Aquatic Veterinary Medicine",
                            UserId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea")
                        },
                        new
                        {
                            Id = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8020),
                            IsDeleted = false,
                            LicenseNumber = "VN789012",
                            Qualifications = "PhD in Veterinary Science",
                            Specialty = "Fish Surgery",
                            UserId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.VeterinarianSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("VeterinarianSchedule", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f6e0f34-45c2-46ea-8d65-8191d7c6fa6f"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8119),
                            Date = new DateTime(2024, 10, 21, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("24ab377f-4312-495f-8f6f-738d347f70b3"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8123),
                            Date = new DateTime(2024, 10, 22, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("d0f377db-34e2-4b65-8f2f-76d347e70b41"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8126),
                            Date = new DateTime(2024, 10, 23, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("c034eaf7-d41b-46e1-bb5f-84843f4793c6"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8129),
                            Date = new DateTime(2024, 10, 17, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("eb0f377d-3412-4c62-8f6f-738d347f70b4"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8132),
                            Date = new DateTime(2024, 10, 18, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("75856d7e-125c-4a36-9e24-fabc6d8a7e31"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8135),
                            Date = new DateTime(2024, 10, 19, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("6b34ed3f-0fb1-451e-90cc-bd53bc1ac3a9"),
                            CreatedDate = new DateTime(2024, 10, 17, 8, 14, 25, 620, DateTimeKind.Utc).AddTicks(8140),
                            Date = new DateTime(2024, 10, 20, 15, 14, 25, 620, DateTimeKind.Local).AddTicks(8097),
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ComboService", "ComboService")
                        .WithMany()
                        .HasForeignKey("ComboServiceId");

                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId");

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany()
                        .HasForeignKey("PetServiceId");

                    b.Navigation("ComboService");

                    b.Navigation("Customer");

                    b.Navigation("Pet");

                    b.Navigation("PetService");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.AppointmentVeterinarian", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentVeterinarians")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany("AppointmentVeterinarians")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Cart", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany()
                        .HasForeignKey("PetServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("PetService");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboServiceItem", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ComboService", "ComboService")
                        .WithMany("ComboServiceItems")
                        .HasForeignKey("ComboServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany("ComboServiceItems")
                        .HasForeignKey("PetServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComboService");

                    b.Navigation("PetService");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Order", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KVSC.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany("OrderItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KVSC.Domain.Entities.User", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Pet");

                    b.Navigation("PetService");

                    b.Navigation("Product");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Payment", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Pet", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetType", "PetType")
                        .WithMany("Pets")
                        .HasForeignKey("PetTypeId");

                    b.Navigation("Owner");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetService", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.PetServiceCategory", "PetServiceCategory")
                        .WithMany("PetServices")
                        .HasForeignKey("PetServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetServiceCategory");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetType", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.PetHabitat", "PetHabitat")
                        .WithMany("PetTypes")
                        .HasForeignKey("PetHabitatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetHabitat");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ServiceReport", "ServiceReport")
                        .WithOne("Prescription")
                        .HasForeignKey("KVSC.Domain.Entities.Prescription", "ServiceReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ServiceReport");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PrescriptionDetail", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Product", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Product", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ServiceReport", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Veterinarian", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "User")
                        .WithOne("Veterinarian")
                        .HasForeignKey("KVSC.Domain.Entities.Veterinarian", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.VeterinarianSchedule", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany("VeterinarianSchedules")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentVeterinarians");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboService", b =>
                {
                    b.Navigation("ComboServiceItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetHabitat", b =>
                {
                    b.Navigation("PetTypes");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetService", b =>
                {
                    b.Navigation("ComboServiceItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetServiceCategory", b =>
                {
                    b.Navigation("PetServices");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetType", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Prescription", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ServiceReport", b =>
                {
                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Pets");

                    b.Navigation("Veterinarian")
                        .IsRequired();
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Veterinarian", b =>
                {
                    b.Navigation("AppointmentVeterinarians");

                    b.Navigation("VeterinarianSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
