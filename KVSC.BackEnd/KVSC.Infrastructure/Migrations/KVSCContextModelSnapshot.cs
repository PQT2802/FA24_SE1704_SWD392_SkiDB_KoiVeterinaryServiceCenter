// <auto-generated />
using System;
using KVSC.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KVSC.Infrastructure.Migrations
{
    [DbContext(typeof(KVSCContext))]
    partial class KVSCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cursus_Data.Models.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplate", (string)null);

                    b.HasData(
                        new
                        {
                            EmailTemplateId = new Guid("fe3df183-1f42-4301-a1fb-35e6211c8816"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>You have a new appointment notification for your koi fish:</p>\r\n                    <p>{{AppointmentDetails}}</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(6986),
                            IsDelete = false,
                            Subject = "New Appointment Notification",
                            Type = "AppointmentNotification",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(6996)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("b4a72a2f-77b9-4fa7-8a87-bb1ef61f2446"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>We received a request to reset your password. Click the link below to reset your password:</p>\r\n                    <p><a href='{{ResetLink}}'>Reset Password</a></p>\r\n                    <p>If you did not request a password reset, please ignore this email.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7001),
                            IsDelete = false,
                            Subject = "Password Reset Request",
                            Type = "ForgetPassword",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7001)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("fe241b67-9fb5-49d4-94ec-7801a8e71e9a"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your password has been successfully reset. You can now log in with your new password.</p>\r\n                    <p>If you did not request this change, please contact our support team immediately.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7007),
                            IsDelete = false,
                            Subject = "Your Password Has Been Reset",
                            Type = "ResetPassword",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7008)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("e42c3d1a-2e1c-4b2a-92f2-33d1cf2fdc2b"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Thank you for registering with the Koi Veterinary Service Center. Please confirm your account by clicking the link below:</p>\r\n                    <p><a href='{{ConfirmationLink}}'>Confirm Account</a></p>\r\n                    <p>If you did not register, please ignore this email.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7010),
                            IsDelete = false,
                            Subject = "Account Confirmation",
                            Type = "ConfirmationAccount",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7010)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("c2f45678-1a3d-4012-b4c1-234d5d7f8cde"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>We regret to inform you that your appointment for koi services has been rejected for the following reason:</p>\r\n                    <p>{{RejectionReason}}</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7012),
                            IsDelete = false,
                            Subject = "Appointment Rejection Notification",
                            Type = "RejectAppointment",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7013)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("94e2d05c-fbf9-4f1f-bf89-d2298f8b6b4b"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>We are pleased to inform you that your appointment for koi fish care has been approved.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7015),
                            IsDelete = false,
                            Subject = "Appointment Approval Notification",
                            Type = "ApproveAppointment",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7016)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("ef3455b2-3a6e-4cb5-9c6d-a432d9f1c7ab"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your account has been successfully activated. You can now log in and start using our koi veterinary services.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7018),
                            IsDelete = false,
                            Subject = "Account Activation",
                            Type = "ActivateUser",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7018)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("46db13e8-7899-432b-ae8c-febc15d0f1b2"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your account has been deactivated. If you think this is a mistake, please contact our support team.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7020),
                            IsDelete = false,
                            Subject = "Account Deactivation",
                            Type = "DeactivateUser",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7021)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("f1d7a678-87b5-4c12-b5f2-ae9e4a3d9b8a"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Dear {{UserName}},</p>\r\n                    <p>Your requested koi service titled '{{ServiceTitle}}' has been successfully updated.</p>\r\n                    <p>If you have any questions or need further assistance, please feel free to reach out to us.</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7023),
                            IsDelete = false,
                            Subject = "Service Update Notification",
                            Type = "UpdateService",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7024)
                        },
                        new
                        {
                            EmailTemplateId = new Guid("1f7d6a3c-523d-44b6-b9c5-6f3d3c9874f1"),
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your service titled '{{ServiceTitle}}' has been deactivated for the following reason:</p>\r\n                    <p>{{DeactivationReason}}</p>\r\n                    <p>Best regards,<br>Koi Veterinary Service Center</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7026),
                            IsDelete = false,
                            Subject = "Service Deactivation Notification",
                            Type = "DeactivateService",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7027)
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserEmail", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("EmailTemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "EmailTemplateId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("UserEmail", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ComboServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComboServiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PetId");

                    b.HasIndex("PetServiceId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AppointmentDate = new DateTime(2024, 11, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8184),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetId = new Guid("f1111111-1111-1111-1111-111111111111"),
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AppointmentDate = new DateTime(2024, 11, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8189),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetId = new Guid("f1111111-1111-1111-1111-111111111111"),
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AppointmentDate = new DateTime(2024, 11, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8202),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            IsDeleted = false,
                            PetId = new Guid("f3333333-3333-3333-3333-333333333333"),
                            PetServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AppointmentDate = new DateTime(2024, 11, 3, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8206),
                            CustomerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            IsDeleted = false,
                            PetServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AppointmentDate = new DateTime(2024, 11, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8212),
                            CustomerId = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AppointmentDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8215),
                            CreatedDate = new DateTime(2024, 10, 24, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AppointmentDate = new DateTime(2024, 11, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8220),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AppointmentDate = new DateTime(2024, 11, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8226),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            IsDeleted = false,
                            PetServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            Status = "Reported"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AppointmentDate = new DateTime(2024, 11, 12, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8230),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Reported"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AppointmentDate = new DateTime(2024, 11, 7, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 7, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8234),
                            CustomerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            IsDeleted = false,
                            PetServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AppointmentDate = new DateTime(2024, 11, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletedDate = new DateTime(2024, 11, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8238),
                            CustomerId = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73"),
                            IsDeleted = false,
                            PetServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.AppointmentVeterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("AppointmentVeterinarian", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-1111-aaaa-111111111111"),
                            AppointmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8338),
                            IsDeleted = false,
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("22222222-aaaa-2222-aaaa-222222222222"),
                            AppointmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8344),
                            IsDeleted = false,
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("33333333-aaaa-3333-aaaa-333333333333"),
                            AppointmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8346),
                            IsDeleted = false,
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("44444444-aaaa-4444-aaaa-444444444444"),
                            AppointmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8349),
                            IsDeleted = false,
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("55555555-aaaa-5555-aaaa-555555555555"),
                            AppointmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8351),
                            IsDeleted = false,
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("55555555-bbbb-5555-bbbb-555555555555"),
                            AppointmentId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8354),
                            IsDeleted = false,
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("55555555-cccc-5555-cccc-555555555555"),
                            AppointmentId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8357),
                            IsDeleted = false,
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("55555555-dddd-5555-cccc-555555555555"),
                            AppointmentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8360),
                            IsDeleted = false,
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("PetServiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComboService", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComboServiceId");

                    b.HasIndex("PetServiceId");

                    b.ToTable("ComboServiceItem", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Message", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2285342d-c81f-4835-beeb-4d4ac638d3fa"),
                            Content = "Hello, how are you?",
                            RecipientId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9649)
                        },
                        new
                        {
                            Id = new Guid("f320df62-cde4-4a76-b65e-c9bca16db8dd"),
                            Content = "I'm good, thank you! How about you?",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9658)
                        },
                        new
                        {
                            Id = new Guid("584b9941-dbc2-4fb7-8a20-99553e599ec3"),
                            Content = "I'm good too. Are you free today?",
                            RecipientId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9660)
                        },
                        new
                        {
                            Id = new Guid("53a34b14-e16a-4308-a7da-24a50f740e77"),
                            Content = "I have some time, do you need anything?",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9663)
                        },
                        new
                        {
                            Id = new Guid("b0d9f02d-f786-44c8-a87e-5b9d9432c138"),
                            Content = "I want to ask you about the new project.",
                            RecipientId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9666)
                        },
                        new
                        {
                            Id = new Guid("dec1a464-7701-481b-bac5-93f525c6c15c"),
                            Content = "Sure! What do you need to know?",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9668)
                        },
                        new
                        {
                            Id = new Guid("e6411b5d-347e-4117-b121-df0dd2a7944c"),
                            Content = "Do you have detailed information about the progress?",
                            RecipientId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9673)
                        },
                        new
                        {
                            Id = new Guid("d84fd31b-77aa-43e9-b609-192f9d79290a"),
                            Content = "I’ll send you a summary.",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9675)
                        },
                        new
                        {
                            Id = new Guid("66b0230d-2dfa-4bf0-9272-c0a0d14d2155"),
                            Content = "Thank you, I’ll review it right away.",
                            RecipientId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9678)
                        },
                        new
                        {
                            Id = new Guid("2736382f-7590-4c0e-8368-cb778703792d"),
                            Content = "You're welcome, always happy to help.",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9680)
                        },
                        new
                        {
                            Id = new Guid("47579140-fc6e-4429-a276-9ebb42d49328"),
                            Content = "Hello! I’m the veterinarian. How can I assist with your koi fish?",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(9682)
                        },
                        new
                        {
                            Id = new Guid("5676ea5c-5312-4a5f-9ebe-ffd5c55aadbf"),
                            Content = "Hi, Doctor! My koi fish seems sluggish and isn’t eating. I’m really worried.",
                            RecipientId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 52, 35, 471, DateTimeKind.Local).AddTicks(9685)
                        },
                        new
                        {
                            Id = new Guid("50c971db-b05d-446d-b116-29ade33e6446"),
                            Content = "I see. Can you tell me the water temperature and the condition of the water?",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 53, 35, 471, DateTimeKind.Local).AddTicks(9689)
                        },
                        new
                        {
                            Id = new Guid("0e2f2684-fe0e-49db-927a-3e5fa44f6bd6"),
                            Content = "The water temperature is 20°C, and the water seems clear, but I noticed a bit of green algae.",
                            RecipientId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 54, 35, 471, DateTimeKind.Local).AddTicks(9691)
                        },
                        new
                        {
                            Id = new Guid("c687238e-5e4b-4fb9-85bd-0b7749debe72"),
                            Content = "Algae can affect water quality. I recommend checking the pH and ammonia levels. You can use a water testing kit for this.",
                            RecipientId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            SenderId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 55, 35, 471, DateTimeKind.Local).AddTicks(9696)
                        },
                        new
                        {
                            Id = new Guid("ae09f60c-4470-4e42-b1ec-dbd6eb2d19b4"),
                            Content = "Thank you, Doctor! I’ll check and get back if I need more help.",
                            RecipientId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            SenderId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Timestamp = new DateTime(2024, 11, 1, 22, 56, 35, 471, DateTimeKind.Local).AddTicks(9698)
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TravelCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PetId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("depositStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("totalAmountStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HealthStatus")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastHealthCheck")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PetTypeId");

                    b.ToTable("Pet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1111111-1111-1111-1111-111111111111"),
                            Age = 3,
                            Color = "Orange and White",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8489),
                            Gender = "Male",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi1.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 35.0,
                            Name = "Koi Fish 1",
                            Note = "Healthy with vibrant colors.",
                            OwnerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 5,
                            Weight = 2.0
                        },
                        new
                        {
                            Id = new Guid("f2222222-2222-2222-2222-222222222222"),
                            Age = 4,
                            Color = "Red and White",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8508),
                            Gender = "Female",
                            HealthStatus = 2,
                            ImageUrl = "https://example.com/koi2.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 40.0,
                            Name = "Koi Fish 2",
                            Note = "Slight issue with fins, under observation.",
                            OwnerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 3,
                            Weight = 3.0
                        },
                        new
                        {
                            Id = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Age = 2,
                            Color = "Yellow and White",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8515),
                            Gender = "Male",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi3.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 32.0,
                            Name = "Koi Fish 3",
                            Note = "In great condition, regular feeding.",
                            OwnerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 10,
                            Weight = 2.0
                        },
                        new
                        {
                            Id = new Guid("f4444444-4444-4444-4444-444444444444"),
                            Age = 1,
                            Color = "Black and White",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8519),
                            Gender = "Female",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi4.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 25.0,
                            Name = "Koi Fish 4",
                            Note = "Newly purchased, adjusting to pond.",
                            OwnerId = new Guid("5f28fcb6-675b-4f97-a925-01ac8c68b5ac"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 7,
                            Weight = 3.0
                        },
                        new
                        {
                            Id = new Guid("f5555555-5555-5555-5555-555555555555"),
                            Age = 5,
                            Color = "Blue and White",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8525),
                            Gender = "Male",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi5.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 45.0,
                            Name = "Koi Fish 5",
                            Note = "Strong swimmer, excellent condition.",
                            OwnerId = new Guid("0d1fbbab-a175-4d90-8291-d5d96ebb9359"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 2,
                            Weight = 3.0
                        },
                        new
                        {
                            Id = new Guid("f6666666-6666-6666-6666-666666666666"),
                            Age = 2,
                            Color = "White",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8530),
                            Gender = "Female",
                            HealthStatus = 1,
                            ImageUrl = "https://example.com/koi6.jpg",
                            IsDeleted = false,
                            LastHealthCheck = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 28.0,
                            Name = "Koi Fish 6",
                            Note = "Excellent appetite, feeding well.",
                            OwnerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            PetTypeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Quantity = 4,
                            Weight = 2.0
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetHabitat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HabitatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PetHabitat", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9535),
                            HabitatType = "Freshwater Pond",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9538),
                            HabitatType = "Saltwater Pond",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PetServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TravelCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PetServiceCategoryId");

                    b.ToTable("PetService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed"),
                            AvailableFrom = new DateTime(2024, 10, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 31, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 150.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7673),
                            Duration = "3 hours",
                            ImageUrl = "https://example.com/image7.jpg",
                            IsDeleted = false,
                            Name = "Emergency Care",
                            PetServiceCategoryId = new Guid("3d3bb172-c3d0-4d0f-ac50-713708bc6498"),
                            TravelCost = 30.00m
                        },
                        new
                        {
                            Id = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405"),
                            AvailableFrom = new DateTime(2024, 10, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 31, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 100.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7678),
                            Duration = "2 hours",
                            ImageUrl = "https://example.com/image5.jpg",
                            IsDeleted = false,
                            Name = "Parasite Treatment",
                            PetServiceCategoryId = new Guid("da91046c-71d1-429b-ade3-5e8ff9f701a6"),
                            TravelCost = 25.00m
                        },
                        new
                        {
                            Id = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8"),
                            AvailableFrom = new DateTime(2024, 10, 3, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 20.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7682),
                            Duration = "45 minutes",
                            ImageUrl = "https://example.com/image3.jpg",
                            IsDeleted = false,
                            Name = "Water Quality Testing",
                            PetServiceCategoryId = new Guid("75efc332-0e1b-4d35-a609-4897d83c173e"),
                            TravelCost = 5.00m
                        },
                        new
                        {
                            Id = new Guid("39ebc58b-6731-491d-949d-82f387dce82e"),
                            AvailableFrom = new DateTime(2024, 10, 3, 22, 10, 20, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 4, 2, 10, 20, 0, DateTimeKind.Unspecified),
                            BasePrice = 29.99m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7687),
                            Duration = "30 minutes",
                            ImageUrl = "https://example.com/image.jpg",
                            IsDeleted = false,
                            Name = "Koi Feeding Service",
                            PetServiceCategoryId = new Guid("a5e47a8f-f6e1-4c7a-8955-4a928744f9bf"),
                            TravelCost = 10.00m
                        },
                        new
                        {
                            Id = new Guid("33e71556-d924-4101-bd1f-8707ca0e6f87"),
                            AvailableFrom = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 20, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 30.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7691),
                            Duration = "1 hour",
                            ImageUrl = "https://example.com/image2.jpg",
                            IsDeleted = false,
                            Name = "Koi Feeding Service",
                            PetServiceCategoryId = new Guid("fe3df183-1f42-4301-a1fb-35e6211c8816"),
                            TravelCost = 15.00m
                        },
                        new
                        {
                            Id = new Guid("2d547de7-d7a0-4c27-a26c-9cf3a7099817"),
                            AvailableFrom = new DateTime(2024, 10, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 75.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7695),
                            Duration = "1.5 hours",
                            ImageUrl = "https://example.com/image4.jpg",
                            IsDeleted = false,
                            Name = "Fungal Treatment",
                            PetServiceCategoryId = new Guid("a5e47a8f-f6e1-4c7a-8955-4a928744f9bf"),
                            TravelCost = 20.00m
                        },
                        new
                        {
                            Id = new Guid("8c0ce681-03e2-4ed8-83b2-abc3db694c5b"),
                            AvailableFrom = new DateTime(2024, 10, 3, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 28, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 40.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7700),
                            Duration = "1 hour",
                            ImageUrl = "https://example.com/image8.jpg",
                            IsDeleted = false,
                            Name = "Educational Workshops",
                            PetServiceCategoryId = new Guid("15c55a94-06fb-4dac-8b32-7c1d7af085a3"),
                            TravelCost = 12.00m
                        },
                        new
                        {
                            Id = new Guid("7253ea62-e419-40dc-bc70-e069611587dd"),
                            AvailableFrom = new DateTime(2024, 10, 4, 14, 2, 32, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 11, 3, 14, 2, 32, 0, DateTimeKind.Unspecified),
                            BasePrice = 1.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7707),
                            Duration = "string",
                            ImageUrl = "string",
                            IsDeleted = false,
                            Name = "string",
                            PetServiceCategoryId = new Guid("83d70177-2e40-49c9-a0bf-27ce80cce340"),
                            TravelCost = 0.00m
                        },
                        new
                        {
                            Id = new Guid("c33e3a86-0230-468b-8c06-ee91b7e8cc21"),
                            AvailableFrom = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2024, 10, 30, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            BasePrice = 60.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7711),
                            Duration = "1 hour",
                            ImageUrl = "https://example.com/image6.jpg",
                            IsDeleted = false,
                            Name = "Pond Maintenance",
                            PetServiceCategoryId = new Guid("82b86176-d076-4576-b0f3-60220ca3e5ba"),
                            TravelCost = 15.00m
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicableTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PetServiceCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83d70177-2e40-49c9-a0bf-27ce80cce340"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7512),
                            Description = "A standard health check for Koi fish to monitor their overall well-being and prevent diseases.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Health Check",
                            ServiceType = "Health"
                        },
                        new
                        {
                            Id = new Guid("fe3df183-1f42-4301-a1fb-35e6211c8816"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7527),
                            Description = "Specialized feeding service for Koi fish, ensuring proper nutrition and dietary requirements.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Feeding Service",
                            ServiceType = "Feeding"
                        },
                        new
                        {
                            Id = new Guid("75efc332-0e1b-4d35-a609-4897d83c173e"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7530),
                            Description = "Testing water quality parameters to ensure a healthy environment for Koi.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Water Quality Testing",
                            ServiceType = "Testing"
                        },
                        new
                        {
                            Id = new Guid("a5e47a8f-f6e1-4c7a-8955-4a928744f9bf"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7533),
                            Description = "Treatment services for Koi suffering from fungal infections.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Fungal Treatment",
                            ServiceType = "Treatment"
                        },
                        new
                        {
                            Id = new Guid("da91046c-71d1-429b-ade3-5e8ff9f701a6"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7536),
                            Description = "Services to treat and prevent parasites in Koi fish.",
                            IsDeleted = false,
                            IsOnline = true,
                            Name = "Parasite Treatment Consultation",
                            ServiceType = "Treatment"
                        },
                        new
                        {
                            Id = new Guid("82b86176-d076-4576-b0f3-60220ca3e5ba"),
                            ApplicableTo = "Ponds",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7538),
                            Description = "Regular maintenance services for Koi ponds to ensure optimal conditions.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Pond Maintenance",
                            ServiceType = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("3d3bb172-c3d0-4d0f-ac50-713708bc6498"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7545),
                            Description = "Guidance and assistance in breeding Koi fish.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Koi Breeding Assistance",
                            ServiceType = "Breeding"
                        },
                        new
                        {
                            Id = new Guid("15c55a94-06fb-4dac-8b32-7c1d7af085a3"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7548),
                            Description = "Safe transportation services for Koi fish.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Koi Transportation",
                            ServiceType = "Transportation"
                        },
                        new
                        {
                            Id = new Guid("fb21c5e6-5db5-4dab-99b1-9c5d51f0ab51"),
                            ApplicableTo = "Koi Fish",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7550),
                            Description = "Emergency medical services for Koi in distress.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Emergency Care",
                            ServiceType = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("ca3801df-081c-4db5-a416-b04791797d92"),
                            ApplicableTo = "Koi Enthusiasts",
                            CreatedDate = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7556),
                            Description = "Workshops on Koi care and pond management.",
                            IsDeleted = false,
                            IsOnline = false,
                            Name = "Educational Workshops",
                            ServiceType = "Education"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PetHabitatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecificType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetHabitatId");

                    b.ToTable("PetType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8633),
                            GeneralType = "Fish",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Koi Fish"
                        },
                        new
                        {
                            Id = new Guid("e2222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8641),
                            GeneralType = "Fish",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Goldfish"
                        },
                        new
                        {
                            Id = new Guid("e3333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8644),
                            GeneralType = "Reptile",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Turtle"
                        },
                        new
                        {
                            Id = new Guid("e4444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8648),
                            GeneralType = "Mammal",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Dog"
                        },
                        new
                        {
                            Id = new Guid("e5555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8651),
                            GeneralType = "Mammal",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Cat"
                        },
                        new
                        {
                            Id = new Guid("e6666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8653),
                            GeneralType = "Bird",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Parrot"
                        },
                        new
                        {
                            Id = new Guid("e7777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8655),
                            GeneralType = "Bird",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Canary"
                        },
                        new
                        {
                            Id = new Guid("e8888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8657),
                            GeneralType = "Fish",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Betta Fish"
                        },
                        new
                        {
                            Id = new Guid("e9999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8668),
                            GeneralType = "Reptile",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Iguana"
                        },
                        new
                        {
                            Id = new Guid("eaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8670),
                            GeneralType = "Mammal",
                            IsDeleted = false,
                            PetHabitatId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpecificType = "Hamster"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceReportId")
                        .IsUnique()
                        .HasFilter("[ServiceReportId] IS NOT NULL");

                    b.ToTable("Prescription", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9248),
                            IsDeleted = false,
                            PrescriptionDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceReportId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9260),
                            IsDeleted = false,
                            PrescriptionDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceReportId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9262),
                            IsDeleted = false,
                            PrescriptionDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceReportId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PrescriptionDetail", b =>
                {
                    b.Property<Guid>("PrescriptionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionDetailId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetail", (string)null);

                    b.HasData(
                        new
                        {
                            PrescriptionDetailId = new Guid("11111111-1111-1111-1111-111111111111"),
                            MedicineId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PrescriptionId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Price = 100.00m,
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("22222222-2222-2222-2222-222222222222"),
                            MedicineId = new Guid("22222222-2222-2222-2222-222222222222"),
                            PrescriptionId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Price = 150.00m,
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("33333333-3333-3333-3333-333333333333"),
                            MedicineId = new Guid("33333333-3333-3333-3333-333333333333"),
                            PrescriptionId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Price = 50.00m,
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("44444444-4444-4444-4444-444444444444"),
                            MedicineId = new Guid("44444444-4444-4444-4444-444444444444"),
                            PrescriptionId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Price = 200.00m,
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionDetailId = new Guid("55555555-5555-5555-5555-555555555555"),
                            MedicineId = new Guid("55555555-5555-5555-5555-555555555555"),
                            PrescriptionId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Price = 250.00m,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8835),
                            Description = "Medicine to treat parasite infections in Koi.",
                            ImageUrl = "https://example.com/image1.jpg",
                            IsDeleted = false,
                            Name = "Anti-Parasite Medication",
                            Price = 50.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8843),
                            Description = "Water conditioner for Koi ponds.",
                            ImageUrl = "https://example.com/image2.jpg",
                            IsDeleted = false,
                            Name = "Water Conditioner",
                            Price = 25.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8846),
                            Description = "Nutritional supplement to enhance Koi growth.",
                            ImageUrl = "https://example.com/image3.jpg",
                            IsDeleted = false,
                            Name = "Koi Growth Supplement",
                            Price = 35.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8849),
                            Description = "Stabilizes the pH level of pond water.",
                            ImageUrl = "https://example.com/image4.jpg",
                            IsDeleted = false,
                            Name = "Pond pH Stabilizer",
                            Price = 40.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8851),
                            Description = "Treatment for fungal infections in Koi.",
                            ImageUrl = "https://example.com/image5.jpg",
                            IsDeleted = false,
                            Name = "Fungal Treatment for Koi",
                            Price = 60.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8853),
                            Description = "Replacement filter for Koi ponds.",
                            ImageUrl = "https://example.com/image6.jpg",
                            IsDeleted = false,
                            Name = "Koi Pond Filter",
                            Price = 75.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8856),
                            Description = "Antibiotic for treating bacterial infections in Koi.",
                            ImageUrl = "https://example.com/image7.jpg",
                            IsDeleted = false,
                            Name = "Koi Antibiotic",
                            Price = 45.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8858),
                            Description = "Prevents algae buildup in Koi ponds.",
                            ImageUrl = "https://example.com/image8.jpg",
                            IsDeleted = false,
                            Name = "Algae Control Solution",
                            Price = 30.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 170
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8861),
                            Description = "Controls parasite infections in Koi.",
                            ImageUrl = "https://example.com/image9.jpg",
                            IsDeleted = false,
                            Name = "Parasite Control Solution",
                            Price = 55.00m,
                            ProductCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8865),
                            Description = "Increases oxygen levels in Koi ponds.",
                            ImageUrl = "https://example.com/image10.jpg",
                            IsDeleted = false,
                            Name = "Oxygen Booster for Ponds",
                            Price = 65.00m,
                            ProductCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StockQuantity = 130
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8988),
                            Description = "Medicines for Koi fish treatments.",
                            IsDeleted = false,
                            Name = "Medicines"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8991),
                            Description = "Products for water conditioning and treatment.",
                            IsDeleted = false,
                            Name = "Water Treatment"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8993),
                            Description = "Equipment and accessories for Koi ponds.",
                            IsDeleted = false,
                            Name = "Pond Equipment"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8995),
                            Description = "Food and nutritional supplements for Koi fish.",
                            IsDeleted = false,
                            Name = "Food & Nutrition"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8996),
                            Description = "Devices and kits for monitoring Koi health.",
                            IsDeleted = false,
                            Name = "Health Monitoring"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8998),
                            Description = "Products for cleaning and maintaining Koi ponds.",
                            IsDeleted = false,
                            Name = "Cleaning & Maintenance"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8999),
                            Description = "Supplies for Koi breeding and spawning.",
                            IsDeleted = false,
                            Name = "Breeding Supplies"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9003),
                            Description = "Materials and accessories for pond landscaping.",
                            IsDeleted = false,
                            Name = "Pond Landscaping"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9005),
                            Description = "Tools and equipment for safe fish transportation.",
                            IsDeleted = false,
                            Name = "Fish Transportation"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9006),
                            Description = "Essential supplies for emergency situations with Koi fish.",
                            IsDeleted = false,
                            Name = "Emergency Supplies"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Rating", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b2c3d4e-5f6a-7b8c-9d10-11e12f13a14b"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9804),
                            CustomerId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Feedback = "Excellent service!",
                            IsDeleted = false,
                            Score = 5,
                            ServiceId = new Guid("f6a59f70-c0db-45b4-a598-045a005d42ed")
                        },
                        new
                        {
                            Id = new Guid("2e3f4a5b-6c7d-8e9f-0a1b-21c22d23e24f"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9807),
                            CustomerId = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            Feedback = "Good service but could be faster.",
                            IsDeleted = false,
                            Score = 4,
                            ServiceId = new Guid("7d80bd0a-7780-4c4c-981b-48d7f8784405")
                        },
                        new
                        {
                            Id = new Guid("5a5bb4f1-d460-41e6-9565-d900e601973f"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9812),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            Feedback = "Average experience.",
                            IsDeleted = false,
                            Score = 3,
                            ServiceId = new Guid("2d95b900-9b04-4f6f-94ec-7d47d2a89ec8")
                        },
                        new
                        {
                            Id = new Guid("9b0e17ad-5e78-4fb8-b261-4ebbdad1ca8d"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9815),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            Feedback = "Not satisfied with the waiting time.",
                            IsDeleted = false,
                            Score = 2,
                            ServiceId = new Guid("39ebc58b-6731-491d-949d-82f387dce82e")
                        },
                        new
                        {
                            Id = new Guid("bfe9706c-700b-4d05-bbd4-45b4e9bfe344"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9820),
                            CustomerId = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            Feedback = "Very professional and caring staff.",
                            IsDeleted = false,
                            Score = 5,
                            ServiceId = new Guid("33e71556-d924-4101-bd1f-8707ca0e6f87")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Veterinarian"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ServiceReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasPrescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("ServiceReport", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AppointmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9110),
                            HasPrescription = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            PrescriptionId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Recommendations = "Apply antifungal medication.",
                            ReportContent = "Fungal infection treatment recommended.",
                            ReportDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AppointmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9117),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Regular water testing recommended.",
                            ReportContent = "Report for Koi health check, everything looks fine.",
                            ReportDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AppointmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9121),
                            HasPrescription = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            PrescriptionId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Recommendations = "Follow the prescribed medicine.",
                            ReportContent = "Parasite treatment required for Koi.",
                            ReportDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AppointmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9124),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Adjust pH levels in the water.",
                            ReportContent = "Water quality test completed, minor adjustments needed.",
                            ReportDate = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AppointmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9126),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Monitor fish for 48 hours.",
                            ReportContent = "Emergency care completed, fish stable.",
                            ReportDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AppointmentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9131),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Maintain current diet, no changes needed.",
                            ReportContent = "Feeding routine assessment, nutrition levels adequate.",
                            ReportDate = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AppointmentId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9134),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Fish arrived safely. No action needed.",
                            ReportContent = "Transportation completed successfully.",
                            ReportDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AppointmentId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9136),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Monitor breeding progress over the next 10 days.",
                            ReportContent = "Koi breeding assistance provided. Successful pairing observed.",
                            ReportDate = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AppointmentId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9139),
                            HasPrescription = false,
                            IsCompleted = true,
                            IsDeleted = false,
                            Recommendations = "Replace filter immediately to prevent water contamination.",
                            ReportContent = "Water quality testing performed. Filter replacement needed.",
                            ReportDate = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AppointmentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(9142),
                            HasPrescription = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            PrescriptionId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Recommendations = "Apply antiseptic and monitor healing progress.",
                            ReportContent = "Health check performed. Minor injuries found.",
                            ReportDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("KVSC.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4feb4940-94dc-4aed-b580-ee116b668704"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7178),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            ProfilePictureUrl = "User/0c08ff89-61a7-4b57-9c1d-ac6f3c57907b_Screenshot 2024-01-17 155826.png",
                            Username = "Admin",
                            role = 1
                        },
                        new
                        {
                            Id = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7187),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager@gmail.com",
                            FullName = "Manager",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Manager",
                            role = 2
                        },
                        new
                        {
                            Id = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7191),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "veterinarian1@gmail.com",
                            FullName = "Veterinarian_1",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            ProfilePictureUrl = "User/0c08ff89-61a7-4b57-9c1d-ac6f3c57907b_Screenshot 2024-01-17 155826.png",
                            Username = "Veterinarian_1",
                            role = 3
                        },
                        new
                        {
                            Id = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7193),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "veterinarian2@gmail.com",
                            FullName = "Veterinarian_2",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            ProfilePictureUrl = "User/0c08ff89-61a7-4b57-9c1d-ac6f3c57907b_Screenshot 2024-01-17 155826.png",
                            Username = "Veterinarian_2",
                            role = 3
                        },
                        new
                        {
                            Id = new Guid("d78f90b4-9e62-4b45-9e6e-0a01e5931234"),
                            Address = "456 Elm St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7211),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "veterinarian3@gmail.com",
                            FullName = "Veterinarian_3",
                            IsDeleted = false,
                            PasswordHash = "String456!",
                            PhoneNumber = "987654321",
                            ProfilePictureUrl = "User/0c08ff89-61a7-4b57-9c1d-ac6f3c57907b_Screenshot 2024-01-17 155826.png",
                            Username = "Veterinarian_3",
                            role = 3
                        },
                        new
                        {
                            Id = new Guid("5f28fcb6-675b-4f97-a925-01ac8c68b5ac"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7214),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff1@gmail.com",
                            FullName = "Staff_1",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Staff_1",
                            role = 4
                        },
                        new
                        {
                            Id = new Guid("0d1fbbab-a175-4d90-8291-d5d96ebb9359"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7217),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff2@gmail.com",
                            FullName = "Staff_2",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Staff_2",
                            role = 4
                        },
                        new
                        {
                            Id = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7220),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@gmail.com",
                            FullName = "Customer_1",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            ProfilePictureUrl = "User/0c08ff89-61a7-4b57-9c1d-ac6f3c57907b_Screenshot 2024-01-17 155826.png",
                            Username = "Customer_1",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("bca84e29-de4d-475b-a3ad-a02e937efa14"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7222),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@gmail.com",
                            FullName = "Customer_2",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Customer_2",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("45a9dc1c-fb8a-4607-9a7e-d6b1359384d7"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7225),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer3@gmail.com",
                            FullName = "Customer_3",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Customer_3",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("d13e5c69-8d8a-4b67-b378-0e2de003816b"),
                            Address = "456 Elm St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7227),
                            DateOfBirth = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer4@gmail.com",
                            FullName = "Customer_4",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "987654321",
                            Username = "Customer_4",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("a1d5c6e2-4f26-4860-9f3e-563a07f1cbf6"),
                            Address = "789 Pine St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7234),
                            DateOfBirth = new DateTime(1993, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer5@gmail.com",
                            FullName = "Customer_5",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "234567890",
                            Username = "Customer_5",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("6b1f16be-c12a-4709-95d4-f0c623239823"),
                            Address = "321 Maple St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7238),
                            DateOfBirth = new DateTime(1994, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer6@gmail.com",
                            FullName = "Customer_6",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "345678901",
                            Username = "Customer_6",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("f1f55d2a-b96f-4c74-b89e-e4c29a1d8e2e"),
                            Address = "654 Cedar St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7240),
                            DateOfBirth = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer7@gmail.com",
                            FullName = "Customer_7",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "456789012",
                            Username = "Customer_7",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("ca28f1ab-1cfc-4e99-835f-e44c65756bb3"),
                            Address = "987 Birch St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7243),
                            DateOfBirth = new DateTime(1996, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer8@gmail.com",
                            FullName = "Customer_8",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "567890123",
                            Username = "Customer_8",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("c30d6f58-b8e0-4fb4-b10c-f9c2af7a3622"),
                            Address = "159 Willow St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7245),
                            DateOfBirth = new DateTime(1997, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer9@gmail.com",
                            FullName = "Customer_9",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "678901234",
                            Username = "Customer_9",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("a41b99c8-7d70-4c8c-9bc3-e249f93c9278"),
                            Address = "753 Cherry St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7248),
                            DateOfBirth = new DateTime(1998, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer10@gmail.com",
                            FullName = "Customer_10",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "789012345",
                            Username = "Customer_10",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("e79cb43f-3b60-4d8d-84c5-579c1d6c80e4"),
                            Address = "852 Oak St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7250),
                            DateOfBirth = new DateTime(1999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer11@gmail.com",
                            FullName = "Customer_11",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "890123456",
                            Username = "Customer_11",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("f81253a8-7937-4c29-80d3-bcfa0522f9e8"),
                            Address = "963 Sycamore St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7253),
                            DateOfBirth = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer12@gmail.com",
                            FullName = "Customer_12",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "901234567",
                            Username = "Customer_12",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("4b171e29-8041-4d4d-a96d-4f7efc1f635b"),
                            Address = "357 Fir St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7255),
                            DateOfBirth = new DateTime(1988, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer13@gmail.com",
                            FullName = "Customer_13",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "012345678",
                            Username = "Customer_13",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("c4e31a0b-982b-43e5-bb52-93b7c2e4b307"),
                            Address = "258 Spruce St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7261),
                            DateOfBirth = new DateTime(1987, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer14@gmail.com",
                            FullName = "Customer_14",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "123456789",
                            Username = "Customer_14",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("a255eb98-d5b4-4e57-bbff-1de8c6b844b0"),
                            Address = "369 Redwood St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7263),
                            DateOfBirth = new DateTime(1986, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer15@gmail.com",
                            FullName = "Customer_15",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "987654321",
                            Username = "Customer_15",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("79a27f2e-e21b-49b1-99a3-e66b18c5cba0"),
                            Address = "147 Palm St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7266),
                            DateOfBirth = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer16@gmail.com",
                            FullName = "Customer_16",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "234567890",
                            Username = "Customer_16",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("e3c1e155-dbc4-40a8-8a5a-091557942c55"),
                            Address = "258 Acacia St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7269),
                            DateOfBirth = new DateTime(1984, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer17@gmail.com",
                            FullName = "Customer_17",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "345678901",
                            Username = "Customer_17",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("0f43fda0-fbde-4079-8ae4-66da674c8455"),
                            Address = "369 Larch St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7271),
                            DateOfBirth = new DateTime(1983, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer18@gmail.com",
                            FullName = "Customer_18",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "456789012",
                            Username = "Customer_18",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("fe29d53f-44b8-40b5-8672-bb37f6b5c8c5"),
                            Address = "579 Fir St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7274),
                            DateOfBirth = new DateTime(1982, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer19@gmail.com",
                            FullName = "Customer_19",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "567890123",
                            Username = "Customer_19",
                            role = 5
                        },
                        new
                        {
                            Id = new Guid("c5e4f6e5-bd3c-4fd5-b3d7-8a7f9c8e3b44"),
                            Address = "690 Cedar St",
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7276),
                            DateOfBirth = new DateTime(1981, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer20@gmail.com",
                            FullName = "Customer_20",
                            IsDeleted = false,
                            PasswordHash = "String123!",
                            PhoneNumber = "678901234",
                            Username = "Customer_20",
                            role = 5
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Veterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Veterinarian", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7821),
                            IsDeleted = false,
                            LicenseNumber = "VN123456",
                            Qualifications = "Doctor of Veterinary Medicine (DVM)",
                            Specialty = "Aquatic Veterinary Medicine",
                            UserId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea")
                        },
                        new
                        {
                            Id = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7825),
                            IsDeleted = false,
                            LicenseNumber = "VN789012",
                            Qualifications = "PhD in Veterinary Science",
                            Specialty = "Fish Surgery",
                            UserId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a")
                        },
                        new
                        {
                            Id = new Guid("b87a3240-e68a-4f38-8f14-7a56f7b9d123"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(7828),
                            IsDeleted = false,
                            LicenseNumber = "VN345678",
                            Qualifications = "Master's in Veterinary Medicine",
                            Specialty = "Aquatic Animal Medicine",
                            UserId = new Guid("d78f90b4-9e62-4b45-9e6e-0a01e5931234")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.VeterinarianSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("VeterinarianSchedule", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f6e0f34-45c2-46ea-8d65-8191d7c6fa6f"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8014),
                            Date = new DateTime(2024, 11, 4, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("24ab377f-4312-495f-8f6f-738d347f70b3"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8018),
                            Date = new DateTime(2024, 11, 5, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("d0f377db-34e2-4b65-8f2f-76d347e70b41"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8023),
                            Date = new DateTime(2024, 11, 6, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("c034eaf7-d41b-46e1-bb5f-84843f4793c6"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8031),
                            Date = new DateTime(2024, 11, 7, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("eb0f377d-3412-4c62-8f6f-738d347f70b4"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8034),
                            Date = new DateTime(2024, 11, 1, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            VeterinarianId = new Guid("d59b53f6-7bc4-4af7-b5f5-438e16b75dd4")
                        },
                        new
                        {
                            Id = new Guid("75856d7e-125c-4a36-9e24-fabc6d8a7e31"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8041),
                            Date = new DateTime(2024, 11, 2, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        },
                        new
                        {
                            Id = new Guid("6b34ed3f-0fb1-451e-90cc-bd53bc1ac3a9"),
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 471, DateTimeKind.Utc).AddTicks(8044),
                            Date = new DateTime(2024, 11, 3, 22, 51, 35, 471, DateTimeKind.Local).AddTicks(7930),
                            EndTime = new TimeSpan(0, 21, 0, 0, 0),
                            IsAvailable = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            VeterinarianId = new Guid("21a15a4f-32f5-4d45-a056-f0d61f384e1b")
                        });
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae00b433-7958-44cc-abc1-6ccdcd90200c"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2570),
                            IsDeleted = false,
                            UserId = new Guid("4feb4940-94dc-4aed-b580-ee116b668704")
                        },
                        new
                        {
                            Id = new Guid("3d78cd00-25de-420f-b1ef-faa875d1ff86"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2574),
                            IsDeleted = false,
                            UserId = new Guid("b59d5d37-53d8-4cb6-98ed-520f49eafa73")
                        },
                        new
                        {
                            Id = new Guid("150d10ca-2ee5-44f6-99f9-87555f57a5c0"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2577),
                            IsDeleted = false,
                            UserId = new Guid("1dac24c4-08e2-4612-84dc-7c8960e483ea")
                        },
                        new
                        {
                            Id = new Guid("b9310983-75e4-4ab4-acbd-456915055b6c"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2584),
                            IsDeleted = false,
                            UserId = new Guid("2430f703-cb67-4225-bb7e-c9abe5803b8a")
                        },
                        new
                        {
                            Id = new Guid("7bf4fb69-7e7b-4064-8e0f-5b79a3433e69"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2586),
                            IsDeleted = false,
                            UserId = new Guid("5f28fcb6-675b-4f97-a925-01ac8c68b5ac")
                        },
                        new
                        {
                            Id = new Guid("540d941b-510f-4ee9-9336-ef471fbd7db4"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2589),
                            IsDeleted = false,
                            UserId = new Guid("0d1fbbab-a175-4d90-8291-d5d96ebb9359")
                        },
                        new
                        {
                            Id = new Guid("4ca8e18f-f84b-40e0-ac6d-65213b66196f"),
                            Amount = 1000.00m,
                            CreatedDate = new DateTime(2024, 11, 1, 15, 51, 35, 472, DateTimeKind.Utc).AddTicks(2592),
                            IsDeleted = false,
                            UserId = new Guid("dd0e9f37-d587-401d-932e-7f098eb60b3e")
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserEmail", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany("UserEmails")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.User", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ComboService", "ComboService")
                        .WithMany()
                        .HasForeignKey("ComboServiceId");

                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId");

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany()
                        .HasForeignKey("PetServiceId");

                    b.Navigation("ComboService");

                    b.Navigation("Customer");

                    b.Navigation("Pet");

                    b.Navigation("PetService");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.AppointmentVeterinarian", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentVeterinarians")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany("AppointmentVeterinarians")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Cart", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany()
                        .HasForeignKey("PetServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("PetService");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboServiceItem", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ComboService", "ComboService")
                        .WithMany("ComboServiceItems")
                        .HasForeignKey("ComboServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany("ComboServiceItems")
                        .HasForeignKey("PetServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComboService");

                    b.Navigation("PetService");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Order", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KVSC.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KVSC.Domain.Entities.PetService", "PetService")
                        .WithMany("OrderItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KVSC.Domain.Entities.User", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Pet");

                    b.Navigation("PetService");

                    b.Navigation("Product");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Payment", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Pet", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetType", "PetType")
                        .WithMany("Pets")
                        .HasForeignKey("PetTypeId");

                    b.Navigation("Owner");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetService", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.PetServiceCategory", "PetServiceCategory")
                        .WithMany("PetServices")
                        .HasForeignKey("PetServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetServiceCategory");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetType", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.PetHabitat", "PetHabitat")
                        .WithMany("PetTypes")
                        .HasForeignKey("PetHabitatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetHabitat");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ServiceReport", "ServiceReport")
                        .WithOne("Prescription")
                        .HasForeignKey("KVSC.Domain.Entities.Prescription", "ServiceReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ServiceReport");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PrescriptionDetail", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Product", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Product", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Rating", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KVSC.Domain.Entities.PetService", "Service")
                        .WithMany("Ratings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ServiceReport", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Appointment", "Appointment")
                        .WithOne("ServiceReport")
                        .HasForeignKey("KVSC.Domain.Entities.ServiceReport", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Veterinarian", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "User")
                        .WithOne("Veterinarian")
                        .HasForeignKey("KVSC.Domain.Entities.Veterinarian", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.VeterinarianSchedule", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany("VeterinarianSchedules")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("KVSC.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("KVSC.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.EmailTemplate", b =>
                {
                    b.Navigation("UserEmails");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentVeterinarians");

                    b.Navigation("ServiceReport")
                        .IsRequired();
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ComboService", b =>
                {
                    b.Navigation("ComboServiceItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetHabitat", b =>
                {
                    b.Navigation("PetTypes");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetService", b =>
                {
                    b.Navigation("ComboServiceItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetServiceCategory", b =>
                {
                    b.Navigation("PetServices");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.PetType", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Prescription", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.ServiceReport", b =>
                {
                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("KVSC.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Pets");

                    b.Navigation("Ratings");

                    b.Navigation("Transactions");

                    b.Navigation("UserEmails");

                    b.Navigation("Veterinarian")
                        .IsRequired();

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("KVSC.Domain.Entities.Veterinarian", b =>
                {
                    b.Navigation("AppointmentVeterinarians");

                    b.Navigation("VeterinarianSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
